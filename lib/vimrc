

" Switch between the last two files
nnoremap <Leader><Leader> <C-^>


" vim-test mappings
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>

" Run commands that require an interactive shell
nnoremap <Leader>r :RunInInteractiveShell<Space>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Set tags for vim-fugitive
set tags^=.git/tags

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" Map Ctrl + p to open fuzzy find (FZF)
nnoremap <c-p> :Files<cr>

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => BEGIN PERSONAL MODS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set spelllang=en
set spellfile=$NIX_SOURCE_DIR/vim-spell/en.utf-8.add " Point directly at file, not at symlink in ~/ so updates aren't lost

set incsearch nohlsearch " do incremental searching without residual highlighting
set smartcase     " Case insensitive searches, until an uppercase letter is type


" Two settings to (potentially) aid in keeping the UI responsive, e.g. when
" scrolling
set ttyfast
set lazyredraw

" Set to auto read when a file is changed from the outside
set autoread

" Prevent auto line breaking, see http://vim.wikia.com/wiki/VimTip989
:set wrap
:set linebreak
:set nolist  " list disables linebreak
:set textwidth=0
:set wrapmargin=0

" Highlight column 120
let &colorcolumn="120,120"

" Appearance
set encoding=UTF-8
set guifont=Monoid_Nerd_Font_Mono:h11
try
  let g:molokai_original=0
  let g:rehash256 = 1
  colorscheme molokai
  highlight LineNr ctermfg=grey
catch
endtry

" Python package paths for NeoVim
"if has('nvim')
  "let g:python_host_prog  = system('$(which python2)')
  "let g:python2_host_prog  = system('$(which python2)')
  "let g:python3_host_prog = system('$(which python3)')
"endif

" Markdown tables
au Filetype markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

let g:vim_markdown_folding_disabled = 1

" Vim-Zoom
if !hasmapto('<Plug>(zoom-toggle)')
  nmap <Leader>m <Plug>(zoom-toggle)
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vimwiki config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:vimwiki_list = [
  \{
    \ 'path' : '~/Dropbox/Apps/Editorial/wikis/personal',
    \ 'syntax' : 'markdown',
    \ 'ext' : '.md',
    \ 'auto_export' : 1
  \},
  \{
    \ 'path' : '~/Dropbox/Apps/Editorial/wikis/uncharted_worlds',
    \ 'syntax' : 'markdown',
    \ 'ext' : '.md',
    \ 'auto_export' : 1
  \}
\]
let g:vimwiki_autowriteall = 1 " 1 == on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Nerdtree config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Indent guides
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Language specifics
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" React and JSX
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

let g:user_emmet_leader_key = '<C-Y>' " trigger completion with Ctrl-Y , <- don't forget the comma
let g:user_emmet_settings = {
\      'javascript.jsx' : { 'extends' : 'jsx' },
\      'javascript' : { 'extends' : 'jsx' },
\     }

" Ruby indentation style
let ruby_indent_block_style = 'do'

" Automated testing
autocmd FileType ruby map <silent> <leader>s :TestNearest<CR>
autocmd FileType ruby map <silent> <leader>t :TestFile<CR>
autocmd FileType ruby map <silent> <leader>l :TestLast<CR>
autocmd FileType ruby map <silent> <leader>g :TestVisit<CR>

let test#strategy = "tslime"
let g:test#preserve_screen = 1

let test#ruby#rspec#options = {
  \ 'nearest': '--fail-fast',
  \ 'file':    '--fail-fast',
  \ 'suite':   '--fail-fast',
\}

" By default assume that we want to target the current window in the current
" session for tslime commands, like test runs

let g:tslime_always_current_session=1
let g:tslime_always_current_window=1
let g:tmux_panenumber=2

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" Ruby mode for .thor and .etl files
au BufRead,BufNewFile *.thor set filetype=ruby
au BufNewFile,BufRead *.etl set filetype=ruby
au BufNewFile,BufRead *.jbuilder set filetype=ruby
au BufNewFile,BufRead *.axlsx set filetype=ruby

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" jk in rapid succession will bring you out of insert mode
inoremap jk <esc>
inoremap kj <esc>

cnoremap jk <c-c>
cnoremap kj <c-c>

vnoremap v <esc>

" Quick save shortcut
noremap <Leader>f :update<CR>

" Quick tab switching
nnoremap H gT
nnoremap L gt

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Start in hard mode by default
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

" Toggle hard mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" Configure custom shortcuts for moving between git hunks
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

let g:gitgutter_updatetime = 100

map y <Plug>(highlightedyank)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc#L202
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2  }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr><Paste>"

nmap <Leader>ttf :TableFormat<CR>

lua << LUA
local lsp_installer = require("nvim-lsp-installer")

local on_attach = function(_, bufnr)
  local opts = { noremap = true, silent = true }
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<c-K>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'v', '<leader>ca', '<cmd>lua vim.lsp.buf.range_code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>q', '<cmd>lua vim.diagnostic.setqflist()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>so', [[<cmd>lua require('telescope.builtin').lsp_document_symbols()<CR>]], opts)
  vim.cmd [[ command! Format execute 'lua vim.lsp.buf.formatting()' ]]
end

lsp_installer.on_server_ready(function(server)
    local opts = {
      on_attach = on_attach
    }

    server:setup(opts)
end)
LUA

